// Generated by gencpp from file move_zumy/Mov2LocSrvRequest.msg
// DO NOT EDIT!


#ifndef MOVE_ZUMY_MESSAGE_MOV2LOCSRVREQUEST_H
#define MOVE_ZUMY_MESSAGE_MOV2LOCSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>

namespace move_zumy
{
template <class ContainerAllocator>
struct Mov2LocSrvRequest_
{
  typedef Mov2LocSrvRequest_<ContainerAllocator> Type;

  Mov2LocSrvRequest_()
    : zumyID()
    , goal()  {
    }
  Mov2LocSrvRequest_(const ContainerAllocator& _alloc)
    : zumyID(_alloc)
    , goal(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _zumyID_type;
  _zumyID_type zumyID;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _goal_type;
  _goal_type goal;




  typedef boost::shared_ptr< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Mov2LocSrvRequest_

typedef ::move_zumy::Mov2LocSrvRequest_<std::allocator<void> > Mov2LocSrvRequest;

typedef boost::shared_ptr< ::move_zumy::Mov2LocSrvRequest > Mov2LocSrvRequestPtr;
typedef boost::shared_ptr< ::move_zumy::Mov2LocSrvRequest const> Mov2LocSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace move_zumy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "525ac35ae22e008a65d5e78e8b611e25";
  }

  static const char* value(const ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x525ac35ae22e008aULL;
  static const uint64_t static_value2 = 0x65d5e78e8b611e25ULL;
};

template<class ContainerAllocator>
struct DataType< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "move_zumy/Mov2LocSrvRequest";
  }

  static const char* value(const ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string zumyID\n\
geometry_msgs/Pose2D goal\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zumyID);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Mov2LocSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::move_zumy::Mov2LocSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "zumyID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.zumyID);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVE_ZUMY_MESSAGE_MOV2LOCSRVREQUEST_H
