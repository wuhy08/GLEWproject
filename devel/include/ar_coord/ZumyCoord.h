// Generated by gencpp from file ar_coord/ZumyCoord.msg
// DO NOT EDIT!


#ifndef AR_COORD_MESSAGE_ZUMYCOORD_H
#define AR_COORD_MESSAGE_ZUMYCOORD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Time.h>
#include <geometry_msgs/Pose2D.h>

namespace ar_coord
{
template <class ContainerAllocator>
struct ZumyCoord_
{
  typedef ZumyCoord_<ContainerAllocator> Type;

  ZumyCoord_()
    : zumyID()
    , time()
    , position()  {
    }
  ZumyCoord_(const ContainerAllocator& _alloc)
    : zumyID(_alloc)
    , time(_alloc)
    , position(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _zumyID_type;
  _zumyID_type zumyID;

   typedef  ::std_msgs::Time_<ContainerAllocator>  _time_type;
  _time_type time;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _position_type;
  _position_type position;




  typedef boost::shared_ptr< ::ar_coord::ZumyCoord_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ar_coord::ZumyCoord_<ContainerAllocator> const> ConstPtr;

}; // struct ZumyCoord_

typedef ::ar_coord::ZumyCoord_<std::allocator<void> > ZumyCoord;

typedef boost::shared_ptr< ::ar_coord::ZumyCoord > ZumyCoordPtr;
typedef boost::shared_ptr< ::ar_coord::ZumyCoord const> ZumyCoordConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ar_coord::ZumyCoord_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ar_coord::ZumyCoord_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ar_coord

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ar_coord': ['/home/cc/ee106a/fa15/class/ee106a-cn/ros_workspaces/project/src/ar_coord/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ar_coord::ZumyCoord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ar_coord::ZumyCoord_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar_coord::ZumyCoord_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ar_coord::ZumyCoord_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar_coord::ZumyCoord_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ar_coord::ZumyCoord_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ar_coord::ZumyCoord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "100d2833b93ecf2b5920ca100a6fdaf8";
  }

  static const char* value(const ::ar_coord::ZumyCoord_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x100d2833b93ecf2bULL;
  static const uint64_t static_value2 = 0x5920ca100a6fdaf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ar_coord::ZumyCoord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ar_coord/ZumyCoord";
  }

  static const char* value(const ::ar_coord::ZumyCoord_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ar_coord::ZumyCoord_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string zumyID\n\
std_msgs/Time time\n\
geometry_msgs/Pose2D position\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::ar_coord::ZumyCoord_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ar_coord::ZumyCoord_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zumyID);
      stream.next(m.time);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ZumyCoord_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ar_coord::ZumyCoord_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ar_coord::ZumyCoord_<ContainerAllocator>& v)
  {
    s << indent << "zumyID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.zumyID);
    s << indent << "time: ";
    s << std::endl;
    Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "  ", v.time);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AR_COORD_MESSAGE_ZUMYCOORD_H
